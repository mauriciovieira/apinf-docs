swagger: '2.0'
info:
  description: |
    ## What is APInf?
    
    APinf is an open source API management tool and a catalog. Solution supports both REST and MQTT proxies. You can have multiple proxies under one management.
    
    ----
    
    
    ** Check out free to use community instance at https://apinf.io ** 
    
    ----
    
    
    ### For API owners 
    
    APInf provides you with a unified, simple interface for publishing your APIs to the developer community and performing complex API management tasks. It allows you to gain a better understanding of your API trafÔ¨Åc. 
    
     Each organization has organization page which provides single URL to promote to developers. 
    
    ### For developers (API end-user) 
    For developers APInf catalog and dashboard offers a one stop location to discover APIs, track your application API usage, and more.
    
    ### APInf User API
    With this API you can Add, Update and Remove (CRUD) information about APInf service users.
    
    ### Examples for each method to get you started
    
    In documentation each of the methods contain simple examples to get you started. Here's an example.
    
    Example call: ``` GET /apis?limit=200&lifecycle=production``` 
        
    Result: returns maximum of 200 APIs which are in production lifecycle. More examples can be found under each method. 
  
    ### API keys, authentication and dates 
    
    * We require API key in all GET methods. You can get it by creating account to Apinf system. Create it now from https://apinf.io/sign-up 
    * PUT and DELETE methods require valid authentication. 
    * User with role Admin can manage other users data, too. Other users can manage their own data only.
    * Dates and times are returned in ISODate format, for example "2012-07-14T01:00:00+01:00". 
    
    ---- 
  
  version: MVP
  title: APInf User API
  termsOfService: http://swagger.io/terms/
  contact:
    email: team@apinf.io
  license:
    name: EUPL
    url: https://joinup.ec.europa.eu/community/eupl/og_page/european-union-public-licence-eupl-v11 

# host: api.apinf.io
# basePath: /v1


tags:
- name: Users 
  description: Users related methods
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
schemes:
 - https
# host: api.apinf.io
# basePath: /v1
paths:
  /users:
    get:
      tags:
      - Users, authentication required
      security:
        - api_key: []
      summary: List and search users.
      operationId: searchUsers
      description: |
        By passing in the appropriate options, you can search for users in the system. User can belong to one or more organizations. By default, method returns 100 users sorted by username. You can adjust the amount of returned list with ```limit``` parameter. 
        
        As a response a user with Admin role gets list of all users, other users get their own data.
        
        The field named ```_id ``` in response data contains the user id, which is needed, when the users are be queried, updated and deleted.
        
        ----
        
          ** A Simple example ** 
        
          List maximum of 50 users, sort by username 
        
          ``` GET /users?limit=50&sort_by=username```
        
        ----
      
      produces:
      - application/json
      parameters:
      - in: query
        name: q
        description: Pass an optional search string for looking up users.
        required: false
        type: string
      - in: query
        name: organization_id
        description: Pass an optional organization id. Parameter will limit results to the given organization.
        required: false
        type: string
      - in: query
        name: skip
        description: Number of records to skip for pagination.
        required: false
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: sort_by
        description: For sorting you can use following options "username, created_at". In later phase there are plan sot use parameters "updated_at, organization (organization name)", too. You can provide multiple options to apply multilevel sorting.
        required: false
        type: string
      - in: query
        name: limit
        description: Maximum number of records to return in query.
        type: integer
        format: int32
        minimum: 0
        maximum: 200
        
      responses:
        "200":
          description: Search results matching critera.
          schema:
            $ref: "#/definitions/get_user_data"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"  
    
    post:
      tags:
      - Users
      security:
        - oauth: []
      summary: Adds a user.
      operationId: addUser
      description: Adds a user to the system.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: user
        description: User to be added. User's ```id``` will be generated by the system, thus it cannot be given. 
        schema:
          $ref: '#/definitions/new_user'
      responses:
        "201":
          description: User created
          schema:
            $ref: "#/definitions/post_user_response"
        "400":
          description: Invalid input, object invalid
        "409":
          description: User already exists
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  
  
  /users/{id}:
    get:
      tags:
      - Users, authentication required
      security:
        - api_key: []
      summary: List and search users.
      operationId: searchUser
      description: |
        By passing in the users id, you can search for users one by one in the system. User can belong to one or more organizations. 
        
        ----
        
          ** A Simple example ** 
        
          List one user data 
        
          ``` GET /users/7L4jNtdfNFGH3igPs ```
        
        ----
      
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Id of the user to fetch. 
        required: true
        type: string

      responses:
        "200":
          description: Search results matching critera.
          schema:
            $ref: "#/definitions/get_user_data"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"  

    put:
      tags:
      - Users, authentication required
      security:
        - oauth: []
      summary: Updates a user.
      operationId: updateUser
      description: Updates the identified user in the system. Parameters username, password and company can be updated.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Id of the user to update. 
        required: true
        type: string
      - in: body
        name: user
        description: User to update. At least one of parameters username, company or password is given.
        schema:
          $ref: '#/definitions/update_user'
      responses:
        200:
          description: User successfully updated
        "400":
          description: Invalid input, object invalid, Erroneous new password
        "403":
          description: Username already exists
        "404":
          description: No user found with given UserID
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"

    delete:
      tags:
      - Users, authentication required
      security:
        - oauth: []
      summary: Deletes a user.
      operationId: deleteUser
      description: Deletes the identified user from the system.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: Id of the user to delete.
        required: true
        type: string
      responses:
        "200":
          description: User deleted
        "400":
          description: Invalid input, object invalid
        "404":
          description: No user found with given UserID
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
      
  /users/updates/:
    get:
      tags:
      - Users, authentication required
      security:
        - api_key: []
      summary: List updated users.
      operationId: listUsers
      description: |
        By passing in the appropriate options, you can get a list of created users in the system. User can belong to one or more organizations. <br />Dates and times are returned in ISODate format, e.g. ```2012-07-14T01:00:00+01:00```. 
        
        By default method returns maximum of 100 items. The default value for applied timeframe is past 7 days (see parameter ```since```).
        
        ----
        
        ** A Simple example **
        
        List maximum of 50 created users 
        
        ``` GET /users/updates?limit=50```
        
        ----
        ** Get only new users created during past week **
        
        ``` GET /users/updates?since=7```

        ----
      produces:
      - application/json
      parameters:
      - in: query
        name: since
        description: Pass an optional delimiter as days - result will contain created users during given time frame from today. Parameter value is given as an integer.  
        required: false
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: organization_id
        description: Pass an optional id of the organization. Parameter will limit results to the given organization. *When this  parameter is used, other parameters are obsolete*. 
        required: false
        type: string
      - in: query
        name: limit
        description: Maximum number of records to return in query.
        type: integer
        format: int32
        minimum: 0
        maximum: 200
      - in: query
        name: skip
        description: number of records to skip for pagination.
        required: false
        type: integer
        format: int32
        minimum: 0


      responses:
        "200":
          description: Search results matching criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/get_user_data'
        "400":
          description: Bad query parameters
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
   
          
securityDefinitions:
  api_key: 
    type: apiKey
    name: api_key
    in: query
  oauth:
    type: oauth2
    authorizationUrl: http://api.example.com/api/auth/
    flow: implicit
    scopes: 
      write:admins: "update/add data"
      
definitions:
  new_user:
    required:
    - username
    - email
    - password
    properties:
      username:
        type: string
        example: myusername
      email:
        type: string
        example: firstname.surname@isp.fi
      password:
        type: string
        example: mypassword
  
  update_user:
    required:
    - username
    - company
    - password
    properties:
      username:
        type: string
        example: myusername
      company:
        type: string
        example: Mighty Company Ltd
      password:
        type: string
        example: mypassword

  get_user_data:
    properties:
      _id:
        type: string
        example: 7L4jNtdfNFGH3igPs
      created_at:
        $ref: '#/definitions/get_user_created_at'
      username:
        type: string
        example: myusername
      profile:
        $ref: '#/definitions/get_user_profile'
      organization:
        $ref: '#/definitions/get_user_organization'

  get_user_created_at:
    type: string
    example: "2012-07-14T01:00:00+01:00"
    description: Dates and times are stored in ISODate format, for example "2012-07-14T01:00:00+01:00". 
  
  get_user_profile:
    type: object
    properties:
      company:
        type: string
        example: Mighty API owners Ltd.

  get_user_organization:
    type: array
    items:
      type: object
      properties:
        organization_id: 
          type: string
          example: eFsLsJH3JTos4HfLc
        organization_name:
          type: string
          example: APInf oy

  post_user_response:
    properties:
      _id:
        type: string
        example: 7L4jNtdfNFGH3igPs
      created_at:
        $ref: '#/definitions/get_user_created_at'
      username:
        type: string
        example: myusername
      profile:
        $ref: '#/definitions/get_user_profile'
      email:
        $ref: '#/definitions/post_user_email_address'    

  post_user_email_address:
    type: array
    items:
      type: object
      properties:
        address: 
          type: string
          example: sam.won@apinf.io
        verified:
          type: string
          example: false

  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: apinf.io
basePath: /rest/v1
